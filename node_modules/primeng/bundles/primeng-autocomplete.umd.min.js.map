{"version":3,"sources":["ng://primeng/autocomplete/autocomplete.ts"],"names":["AUTOCOMPLETE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AutoComplete","multi","el","renderer","cd","differs","this","minLength","delay","type","autoZIndex","baseZIndex","dropdownIcon","unique","completeMethod","EventEmitter","onSelect","onUnselect","onFocus","onBlur","onDropdownClick","onClear","onKeyUp","scrollHeight","dropdownMode","showTransitionOptions","hideTransitionOptions","autocomplete","onModelChange","onModelTouched","overlayVisible","focus","inputFieldValue","differ","find","create","Object","defineProperty","prototype","_suggestions","val","handleSuggestionsChange","ngAfterViewChecked","_this","suggestionsUpdated","overlay","offsetParent","setTimeout","alignOverlay","highlightOptionChanged","listItem","DomHandler","findSingle","scrollInView","loading","highlightOption","length","noResults","show","autoHighlight","emptyMessage","hide","ngAfterContentInit","templates","forEach","item","getType","itemTemplate","template","selectedItemTemplate","writeValue","value","filled","updateInputField","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","onInput","event","inputKeyDown","isIE","timeout","clearTimeout","target","multiple","forceSelection","emit","search","suggestions","updateFilledState","onInputClick","documentClickListener","inputClick","query","originalEvent","selectItem","option","forceSelectionUpdateModelTimeout","multiInputEL","nativeElement","isSelected","__spread","inputEL","field","ObjectUtils","resolveFieldData","focusInput","hasFocus","document","activeElement","onOverlayAnimationStart","toState","element","appendOverlay","style","zIndex","String","zindex","bindDocumentClickListener","bindDocumentResizeListener","onOverlayHide","onOverlayAnimationDone","appendTo","body","appendChild","minWidth","getWidth","children","restoreOverlayAppend","absolutePosition","multiContainerEL","relativePosition","handleDropdownClick","queryValue","removeItem","itemIndex","index","removedValue","filter","i","onKeydown","highlightItemIndex","findOptionIndex","which","nextItemIndex","preventDefault","prevItemIndex","pop","onKeyup","onInputFocus","onInputBlur","onInputChange","valid","inputValue","trim","suggestion","itemValue","this_1","_b","__values","_c","next","done","onInputPaste","selected","equals","dataKey","formattedValue","listen","isDropdownClick","markForCheck","dropdown","dropdownButton","parentNode","unbindDocumentClickListener","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","IterableDiffers","__decorate","Input","Output","ViewChild","static","ContentChildren","PrimeTemplate","Component","selector","animations","trigger","state","transform","opacity","transition","animate","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","AutoCompleteModule","NgModule","imports","CommonModule","InputTextModule","ButtonModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ViewChild,ElementRef,AfterViewChecked,AfterContentInit,OnDestroy,Input,Output,EventEmitter,ContentChildren,QueryList,TemplateRef,Renderer2,forwardRef,ChangeDetectorRef,IterableDiffers} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {ButtonModule} from 'primeng/button';\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {ObjectUtils} from 'primeng/utils';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AutoComplete),\n  multi: true\n};\n\n@Component({\n    selector: 'p-autoComplete',\n    template: `\n        <span [ngClass]=\"{'ui-autocomplete ui-widget':true,'ui-autocomplete-dd':dropdown,'ui-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [autocomplete]=\"autocomplete\" [attr.required]=\"required\" [attr.name]=\"name\"\n            [ngClass]=\"'ui-inputtext ui-widget ui-state-default ui-corner-all ui-autocomplete-input'\" [value]=\"inputFieldValue\" aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\"\n            (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\"\n            [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n            ><ul *ngIf=\"multiple\" #multiContainer class=\"ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-disabled':disabled,'ui-state-focus':focus}\" (click)=\"multiIn.focus()\">\n                <li #token *ngFor=\"let val of value\" class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\">\n                    <span class=\"ui-autocomplete-token-icon pi pi-fw pi-times\" (click)=\"removeItem(token)\" *ngIf=\"!disabled\"></span>\n                    <span *ngIf=\"!selectedItemTemplate\" class=\"ui-autocomplete-token-label\">{{resolveFieldData(val)}}</span>\n                    <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: val}\"></ng-container>\n                </li>\n                <li class=\"ui-autocomplete-input-token\">\n                    <input #multiIn [attr.type]=\"type\" [attr.id]=\"inputId\" [disabled]=\"disabled\" [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" [attr.maxlength]=\"maxlength\" (input)=\"onInput($event)\"  (click)=\"onInputClick($event)\"\n                            (keydown)=\"onKeydown($event)\" [readonly]=\"readonly\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\" [autocomplete]=\"autocomplete\"\n                            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n                            aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\">\n                </li>\n            </ul\n            ><i *ngIf=\"loading\" class=\"ui-autocomplete-loader pi pi-spinner pi-spin\"></i><button #ddBtn type=\"button\" pButton [icon]=\"dropdownIcon\" class=\"ui-autocomplete-dropdown\" [disabled]=\"disabled\"\n                (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\" [attr.tabindex]=\"tabindex\"></button>\n            <div #panel *ngIf=\"overlayVisible\" [ngClass]=\"['ui-autocomplete-panel ui-widget ui-widget-content ui-corner-all ui-shadow']\" [style.max-height]=\"scrollHeight\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\"\n                [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationDone($event)\" >\n                <ul role=\"listbox\" class=\"ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\">\n                    <li role=\"option\"  *ngFor=\"let option of suggestions; let idx = index\" [ngClass]=\"{'ui-autocomplete-list-item ui-corner-all':true,'ui-state-highlight':(highlightOption==option)}\"\n                        (mouseenter)=\"highlightOption=option\" (mouseleave)=\"highlightOption=null\" [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem(option)\">\n                        <span *ngIf=\"!itemTemplate\">{{resolveFieldData(option)}}</span>\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: idx}\"></ng-container>\n                    </li>\n                    <li *ngIf=\"noResults && emptyMessage\" class=\"ui-autocomplete-emptymessage ui-autocomplete-list-item ui-corner-all\">{{emptyMessage}}</li>\n                </ul>\n            </div>\n        </span>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus && !disabled'\n    },\n    providers: [AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class AutoComplete implements AfterViewChecked,AfterContentInit,OnDestroy,ControlValueAccessor {\n\n    @Input() minLength: number = 1;\n\n    @Input() delay: number = 300;\n\n    @Input() style: any;\n\n    @Input() panelStyle: any;\n\n    @Input() styleClass: string;\n    \n    @Input() panelStyleClass: string;\n\n    @Input() inputStyle: any;\n\n    @Input() inputId: string;\n\n    @Input() inputStyleClass: string;\n\n    @Input() placeholder: string;\n\n    @Input() readonly: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() maxlength: number;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() size: number;\n\n    @Input() appendTo: any;\n\n    @Input() autoHighlight: boolean;\n\n    @Input() forceSelection: boolean;\n\n    @Input() type: string = 'text';\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() dropdownIcon: string = \"pi pi-caret-down\";\n\n    @Input() unique: boolean = true;\n\n    @Output() completeMethod: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onDropdownClick: EventEmitter<any> = new EventEmitter();\n\n\t@Output() onClear: EventEmitter<any> = new EventEmitter();\n\n    @Output() onKeyUp: EventEmitter<any> = new EventEmitter();\n\n    @Input() field: string;\n\n    @Input() scrollHeight: string = '200px';\n\n    @Input() dropdown: boolean;\n\n    @Input() dropdownMode: string = 'blank';\n\n    @Input() multiple: boolean;\n\n    @Input() tabindex: number;\n\n    @Input() dataKey: string;\n\n    @Input() emptyMessage: string;\n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @Input() autofocus: boolean;\n\n    @Input() autocomplete: string = 'off';\n\n    @ViewChild('in', { static: false }) inputEL: ElementRef;\n\n    @ViewChild('multiIn', { static: false }) multiInputEL: ElementRef;\n\n    @ViewChild('multiContainer', { static: false }) multiContainerEL: ElementRef;\n\n    @ViewChild('ddBtn', { static: false }) dropdownButton: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    overlay: HTMLDivElement;\n\n    itemTemplate: TemplateRef<any>;\n\n    selectedItemTemplate: TemplateRef<any>;\n\n    value: any;\n\n    _suggestions: any[];\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    timeout: any;\n\n    overlayVisible: boolean = false;\n\n    documentClickListener: any;\n\n    suggestionsUpdated: boolean;\n\n    highlightOption: any;\n\n    highlightOptionChanged: boolean;\n\n    focus: boolean = false;\n\n    filled: boolean;\n\n    inputClick: boolean;\n\n    inputKeyDown: boolean;\n\n    noResults: boolean;\n\n    differ: any;\n\n    inputFieldValue: string = null;\n\n    loading: boolean;\n\n    documentResizeListener: any;\n\n    forceSelectionUpdateModelTimeout: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef, public differs: IterableDiffers) {\n        this.differ = differs.find([]).create(null);\n    }\n\n    @Input() get suggestions(): any[] {\n        return this._suggestions;\n    }\n\n    set suggestions(val:any[]) {\n        this._suggestions = val;\n        this.handleSuggestionsChange();\n    }\n\n    ngAfterViewChecked() {\n        //Use timeouts as since Angular 4.2, AfterViewChecked is broken and not called after panel is updated\n        if (this.suggestionsUpdated && this.overlay && this.overlay.offsetParent) {\n            setTimeout(() => {\n                if (this.overlay) {\n                    this.alignOverlay();\n                }\n            }, 1);\n            this.suggestionsUpdated = false;\n        }\n\n        if (this.highlightOptionChanged) {\n            setTimeout(() => {\n                if (this.overlay) {\n                    let listItem = DomHandler.findSingle(this.overlay, 'li.ui-state-highlight');\n                    if (listItem) {\n                        DomHandler.scrollInView(this.overlay, listItem);\n                    }\n                }\n            }, 1);\n            this.highlightOptionChanged = false;\n        }\n    }\n\n    handleSuggestionsChange() {\n        if (this._suggestions != null && this.loading) {\n            this.highlightOption = null;\n            if (this._suggestions.length) {\n                this.noResults = false;\n                this.show();\n                this.suggestionsUpdated = true;\n\n                if (this.autoHighlight) {\n                    this.highlightOption = this._suggestions[0];\n                }\n            }\n            else {\n                this.noResults = true;\n\n                if (this.emptyMessage) {\n                    this.show();\n                    this.suggestionsUpdated = true;\n                }\n                else {\n                    this.hide();\n                }\n            }\n    \n            this.loading = false;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'selectedItem':\n                    this.selectedItemTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.filled = this.value && this.value != '';\n        this.updateInputField();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    onInput(event: Event) {\n        // When an input element with a placeholder is clicked, the onInput event is invoked in IE.\n        if (!this.inputKeyDown && DomHandler.isIE()) {\n            return;\n        }\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        let value = (<HTMLInputElement> event.target).value;\n        if (!this.multiple && !this.forceSelection) {\n            this.onModelChange(value);\n        }\n\n        if (value.length === 0 && !this.multiple) {\n           this.hide();\n           this.onClear.emit(event);\n\t   this.onModelChange(value);\n        }\n\n        if (value.length >= this.minLength) {\n            this.timeout = setTimeout(() => {\n                this.search(event, value);\n            }, this.delay);\n        }\n        else {\n            this.suggestions = null;\n            this.hide();\n        }\n        this.updateFilledState();\n        this.inputKeyDown = false;\n    }\n\n    onInputClick(event: MouseEvent) {\n        if (this.documentClickListener) {\n            this.inputClick = true;\n        }\n    }\n\n    search(event: any, query: string) {\n        //allow empty string but not undefined or null\n       if (query === undefined || query === null) {\n           return;\n       }\n\n       this.loading = true;\n\n       this.completeMethod.emit({\n           originalEvent: event,\n           query: query\n       });\n    }\n\n    selectItem(option: any, focus: boolean = true) {\n        if (this.forceSelectionUpdateModelTimeout) {\n            clearTimeout(this.forceSelectionUpdateModelTimeout);\n            this.forceSelectionUpdateModelTimeout = null;\n        }\n\n        if (this.multiple) {\n            this.multiInputEL.nativeElement.value = '';\n            this.value = this.value||[];\n            if (!this.isSelected(option) || !this.unique) {\n                this.value = [...this.value,option];\n                this.onModelChange(this.value);\n            }\n        }\n        else {\n            this.inputEL.nativeElement.value = this.field ? ObjectUtils.resolveFieldData(option, this.field)||'': option;\n            this.value = option;\n            this.onModelChange(this.value);\n        }\n\n        this.onSelect.emit(option);\n        this.updateFilledState();\n\n        if (focus) {\n            this.focusInput();\n        }\n    }\n\n    show() {\n        if (this.multiInputEL || this.inputEL) {\n            let hasFocus = this.multiple ? document.activeElement == this.multiInputEL.nativeElement : document.activeElement == this.inputEL.nativeElement ;\n            \n            if (!this.overlayVisible && hasFocus) {\n                this.overlayVisible = true;\n            }\n        }\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    onOverlayAnimationDone(event: AnimationEvent) {\n        if (event.toState === 'void') {\n            this._suggestions = null;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            this.overlay.style.minWidth = DomHandler.getWidth(this.el.nativeElement.children[0]) + 'px';\n        }\n    }\n\n    resolveFieldData(value) {\n        return this.field ? ObjectUtils.resolveFieldData(value, this.field): value;\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n\n    alignOverlay() {\n        if (this.appendTo)\n            DomHandler.absolutePosition(this.overlay, (this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement));\n        else\n            DomHandler.relativePosition(this.overlay, (this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement));\n    }\n\n    hide() {\n        this.overlayVisible = false;\n    }\n\n    handleDropdownClick(event) {\n        this.focusInput();\n        let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n\n        if (this.dropdownMode === 'blank')\n            this.search(event, '');\n        else if (this.dropdownMode === 'current')\n            this.search(event, queryValue);\n\n        this.onDropdownClick.emit({\n            originalEvent: event,\n            query: queryValue\n        });\n    }\n\n    focusInput() {\n        if (this.multiple)\n            this.multiInputEL.nativeElement.focus();\n        else\n            this.inputEL.nativeElement.focus();\n    }\n\n    removeItem(item: any) {\n        let itemIndex = DomHandler.index(item);\n        let removedValue = this.value[itemIndex];\n        this.value = this.value.filter((val, i) => i!=itemIndex);\n        this.onModelChange(this.value);\n        this.updateFilledState();\n        this.onUnselect.emit(removedValue);\n    }\n\n    onKeydown(event) {\n        if (this.overlayVisible) {\n            let highlightItemIndex = this.findOptionIndex(this.highlightOption);\n\n            switch(event.which) {\n                //down\n                case 40:\n                    if (highlightItemIndex != -1) {\n                        var nextItemIndex = highlightItemIndex + 1;\n                        if (nextItemIndex != (this.suggestions.length)) {\n                            this.highlightOption = this.suggestions[nextItemIndex];\n                            this.highlightOptionChanged = true;\n                        }\n                    }\n                    else {\n                        this.highlightOption = this.suggestions[0];\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //up\n                case 38:\n                    if (highlightItemIndex > 0) {\n                        let prevItemIndex = highlightItemIndex - 1;\n                        this.highlightOption = this.suggestions[prevItemIndex];\n                        this.highlightOptionChanged = true;\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //enter\n                case 13:\n                    if (this.highlightOption) {\n                        this.selectItem(this.highlightOption);\n                        this.hide();\n                    }\n                    event.preventDefault();\n                break;\n\n                //escape\n                case 27:\n                    this.hide();\n                    event.preventDefault();\n                break;\n\n\n                //tab\n                case 9:\n                    if (this.highlightOption) {\n                        this.selectItem(this.highlightOption);\n                    }\n                    this.hide();\n                break;\n            }\n        } else {\n            if (event.which === 40 && this.suggestions) {\n                this.search(event,event.target.value);\n            }\n        }\n\n        if (this.multiple) {\n            switch(event.which) {\n                //backspace\n                case 8:\n                    if (this.value && this.value.length && !this.multiInputEL.nativeElement.value) {\n                        this.value = [...this.value];\n                        const removedValue = this.value.pop();\n                        this.onModelChange(this.value);\n                        this.updateFilledState();\n                        this.onUnselect.emit(removedValue);\n                    }\n                break;\n            }\n        }\n\n        this.inputKeyDown = true;\n    }\n\n    onKeyup(event) {\n        this.onKeyUp.emit(event);\n    }\n\n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focus = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    onInputChange(event) {\n        if (this.forceSelection && this.suggestions) {\n            let valid = false;\n            let inputValue = event.target.value.trim();\n\n            if (this.suggestions)  {\n                for (let suggestion of this.suggestions) {\n                    let itemValue = this.field ? ObjectUtils.resolveFieldData(suggestion, this.field) : suggestion;\n                    if (itemValue && inputValue === itemValue.trim()) {\n                        valid = true;\n                        this.forceSelectionUpdateModelTimeout = setTimeout(() => {\n                            this.selectItem(suggestion, false);\n                        }, 250);\n                        break;\n                    }\n                }\n            }\n\n            if (!valid) {\n                if (this.multiple) {\n                    this.multiInputEL.nativeElement.value = '';\n                }\n                else {\n                    this.value = null;\n                    this.inputEL.nativeElement.value = '';\n                }\n\n                this.onClear.emit(event);\n                this.onModelChange(this.value);\n            }\n        }\n    }\n\n    onInputPaste(event: ClipboardEvent) {\n        this.onKeydown(event);\n    }\n\n    isSelected(val: any): boolean {\n        let selected: boolean = false;\n        if (this.value && this.value.length) {\n            for (let i = 0; i < this.value.length; i++) {\n                if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n                    selected = true;\n                    break;\n                }\n            }\n        }\n        return selected;\n    }\n\n    findOptionIndex(option): number {\n        let index: number = -1;\n        if (this.suggestions) {\n            for (let i = 0; i < this.suggestions.length; i++) {\n                if (ObjectUtils.equals(option, this.suggestions[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    updateFilledState() {\n        if (this.multiple)\n            this.filled = (this.value && this.value.length) ||Â (this.multiInputEL && this.multiInputEL.nativeElement && this.multiInputEL.nativeElement.value != '');\n        else\n            this.filled = (this.inputFieldValue && this.inputFieldValue != '') ||Â (this.inputEL && this.inputEL.nativeElement && this.inputEL.nativeElement.value != '');;\n    }\n\n    updateInputField() {\n        let formattedValue = this.value ? (this.field ? ObjectUtils.resolveFieldData(this.value, this.field)||'' : this.value) : '';\n        this.inputFieldValue = formattedValue;\n\n        if (this.inputEL && this.inputEL.nativeElement) {\n            this.inputEL.nativeElement.value = formattedValue;\n        }\n\n        this.updateFilledState();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', (event) => {\n                if (event.which === 3) {\n                    return;\n                }\n\n                if (!this.inputClick && !this.isDropdownClick(event)) {\n                    this.hide();\n                }\n\n                this.inputClick = false;\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    isDropdownClick(event) {\n        if (this.dropdown) {\n            let target = event.target;\n            return (target === this.dropdownButton.nativeElement || target.parentNode === this.dropdownButton.nativeElement);\n        }\n        else {\n            return false;\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n    }\n\n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule,ButtonModule,SharedModule],\n    exports: [AutoComplete,SharedModule],\n    declarations: [AutoComplete]\n})\nexport class AutoCompleteModule { }\n"]}