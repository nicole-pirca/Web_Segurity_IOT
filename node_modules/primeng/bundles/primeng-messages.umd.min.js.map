{"version":3,"sources":["ng://primeng/messages/messages.ts"],"names":["Messages","messageService","this","closable","enableService","showTransitionOptions","hideTransitionOptions","valueChange","EventEmitter","prototype","ngOnInit","_this","messageSubscription","messageObserver","subscribe","messages","Array","filteredMessages","filter","m","key","value","__spread","clearSubscription","clearObserver","hasMessages","length","getSeverityClass","severity","clear","event","emit","preventDefault","Object","defineProperty","icon","ngOnDestroy","unsubscribe","MessageService","decorators","type","Optional","__decorate","Input","Output","Component","selector","template","animations","trigger","state","style","transform","opacity","transition","animate","__param","MessagesModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"yyCAAAA,EAAA,WAuEI,SAAAA,EAA+BC,GAAAC,KAAAD,eAAAA,EApBtBC,KAAAC,UAAoB,EAMpBD,KAAAE,eAAyB,EAIzBF,KAAAG,sBAAgC,iBAEhCH,KAAAI,sBAAgC,gBAE/BJ,KAAAK,YAAuC,IAAIC,EAAAA,aAyFzD,OAjFIR,EAAAS,UAAAC,SAAA,WAAA,IAAAC,EAAAT,KACOA,KAAKD,gBAAkBC,KAAKE,gBAC3BF,KAAKU,oBAAsBV,KAAKD,eAAeY,gBAAgBC,WAAU,SAACC,GACtE,GAAGA,EACC,GAAGA,aAAoBC,MAAO,CAC1B,IAAIC,EAAmBF,EAASG,QAAO,SAAAC,GAAK,OAAAR,EAAKS,MAAQD,EAAEC,OAC3DT,EAAKU,MAAQV,EAAKU,MAAKC,EAAOX,EAAKU,MAAUJ,GAAgBK,EAAQL,QAEhEN,EAAKS,MAAQL,EAASK,MAC3BT,EAAKU,MAAQV,EAAKU,MAAKC,EAAOX,EAAKU,MAAU,CAACN,IAAa,CAACA,OAKxEb,KAAKqB,kBAAoBrB,KAAKD,eAAeuB,cAAcV,WAAU,SAAAM,GAC7DA,EACIT,EAAKS,MAAQA,IACbT,EAAKU,MAAQ,MAIjBV,EAAKU,MAAQ,UAM7BrB,EAAAS,UAAAgB,YAAA,WACI,OAAOvB,KAAKmB,OAASnB,KAAKmB,MAAMK,OAAS,GAG7C1B,EAAAS,UAAAkB,iBAAA,WACI,OAAOzB,KAAKmB,MAAM,GAAGO,UAGzB5B,EAAAS,UAAAoB,MAAA,SAAMC,GACF5B,KAAKmB,MAAQ,GACbnB,KAAKK,YAAYwB,KAAK7B,KAAKmB,OAE3BS,EAAME,kBAGVC,OAAAC,eAAIlC,EAAAS,UAAA,OAAI,KAAR,WACI,IAAI0B,EAAe,KACnB,GAAGjC,KAAKuB,cAEJ,OADUvB,KAAKmB,MAAM,GACVO,UACP,IAAK,UACDO,EAAO,WACX,MAEA,IAAK,OACDA,EAAO,iBACX,MAEA,IAAK,QACDA,EAAO,WACX,MAEA,IAAK,OACDA,EAAO,0BACX,MAEA,QACIA,EAAO,iBAKnB,OAAOA,mCAGXnC,EAAAS,UAAA2B,YAAA,WACQlC,KAAKU,qBACLV,KAAKU,oBAAoByB,cAGzBnC,KAAKqB,mBACLrB,KAAKqB,kBAAkBc,wDAhFgBC,EAAAA,eAAcC,WAAA,CAAA,CAAAC,KAAhDC,EAAAA,cAtBJC,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,6CAEQD,EAAA,CAARC,EAAAA,mCAEQD,EAAA,CAARC,EAAAA,qDAEQD,EAAA,CAARC,EAAAA,qDAESD,EAAA,CAATE,EAAAA,4CAlBQ5C,EAAQ0C,EAAA,CAxCpBG,EAAAA,UAAU,CACPC,SAAU,aACVC,SAAU,qsCAmBVC,WAAY,CACRC,EAAAA,QAAQ,mBAAoB,CACxBC,EAAAA,MAAM,UAAWC,EAAAA,MAAM,CACnBC,UAAW,gBACXC,QAAS,KAEbC,EAAAA,WAAW,YAAa,CACpBH,EAAAA,MAAM,CAACC,UAAW,mBAAoBC,QAAS,IAC/CE,EAAAA,QAAQ,8BAEZD,EAAAA,WAAW,YAAa,CACpBC,EAAAA,QAAO,2BAA+BJ,EAAAA,MAAM,CACxCE,QAAS,EACTD,UAAW,6BA8BdI,EAAA,EAAAf,EAAAA,aAxBJzC,GA/Cb,gBAiKA,SAAAyD,KAA8B,OAAjBA,EAAcf,EAAA,CAL1BgB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC7D,GACV8D,aAAc,CAAC9D,MAENyD","sourcesContent":["import {NgModule,Component,OnInit,OnDestroy,Input,Output,EventEmitter,Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {Message} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\n\n@Component({\n    selector: 'p-messages',\n    template: `\n        <div *ngIf=\"hasMessages()\" class=\"ui-messages ui-widget ui-corner-all\"\n                    [ngClass]=\"{'ui-messages-info':(value[0].severity === 'info'),\n                    'ui-messages-warn':(value[0].severity === 'warn'),\n                    'ui-messages-error':(value[0].severity === 'error'),\n                    'ui-messages-success':(value[0].severity === 'success')}\"\n                    [ngStyle]=\"style\" [class]=\"styleClass\" [@messageAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\">\n            <a tabindex=\"0\" class=\"ui-messages-close\" (click)=\"clear($event)\" (keydown.enter)=\"clear($event)\" *ngIf=\"closable\">\n                <i class=\"pi pi-times\"></i>\n            </a>\n            <span class=\"ui-messages-icon pi\" [ngClass]=\"icon\"></span>\n            <ul>\n                <li *ngFor=\"let msg of value\">\n                    <span *ngIf=\"msg.summary\" class=\"ui-messages-summary\" [innerHTML]=\"msg.summary\"></span>\n                    <span *ngIf=\"msg.detail\" class=\"ui-messages-detail\" [innerHTML]=\"msg.detail\"></span>\n                </li>\n            </ul>\n        </div>\n    `,\n    animations: [\n        trigger('messageAnimation', [\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => *', [\n                style({transform: 'translateY(-25%)', opacity: 0}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition('* => void', [\n                animate(('{{hideTransitionParams}}'), style({\n                    opacity: 0,\n                    transform: 'translateY(-25%)'\n                }))\n            ])\n        ])\n    ]\n})\nexport class Messages implements OnInit, OnDestroy {\n\n    @Input() value: Message[];\n\n    @Input() closable: boolean = true;\n\n    @Input() style: any;\n    \n    @Input() styleClass: string;\n\n    @Input() enableService: boolean = true;\n\n    @Input() key: string;\n\n    @Input() showTransitionOptions: string = '300ms ease-out';\n\n    @Input() hideTransitionOptions: string = '250ms ease-in';\n\n    @Output() valueChange: EventEmitter<Message[]> = new EventEmitter<Message[]>();\n    \n    messageSubscription: Subscription;\n\n    clearSubscription: Subscription;\n\n    constructor(@Optional() public messageService: MessageService) {}\n\n    ngOnInit() {\n        if(this.messageService && this.enableService) {\n            this.messageSubscription = this.messageService.messageObserver.subscribe((messages: any) => {\n                if(messages) {\n                    if(messages instanceof Array) {\n                        let filteredMessages = messages.filter(m => this.key === m.key);\n                        this.value = this.value ? [...this.value, ...filteredMessages] : [...filteredMessages];\n                    }\n                    else if (this.key === messages.key) {\n                        this.value = this.value ? [...this.value, ...[messages]] : [messages];\n                    }\n                }\n            });\n\n            this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n                if (key) {\n                    if (this.key === key) {\n                        this.value = null;\n                    }\n                }\n                else {\n                    this.value = null;\n                }\n            });\n        }\n    }\n\n    hasMessages() {\n        return this.value && this.value.length > 0;\n    }\n\n    getSeverityClass() {\n        return this.value[0].severity;\n    }\n\n    clear(event) {\n        this.value = [];\n        this.valueChange.emit(this.value);\n\n        event.preventDefault();\n    }\n\n    get icon(): string {\n        let icon: string = null;\n        if(this.hasMessages()) {\n            let msg = this.value[0];\n            switch(msg.severity) {\n                case 'success':\n                    icon = 'pi-check';\n                break;\n\n                case 'info':\n                    icon = 'pi-info-circle';\n                break;\n\n                case 'error':\n                    icon = 'pi-times';\n                break;\n\n                case 'warn':\n                    icon = 'pi-exclamation-triangle';\n                break;\n\n                default:\n                    icon = 'pi-info-circle';\n                break;\n            }\n        }\n\n        return icon;\n    }\n\n    ngOnDestroy() {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n        \n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Messages],\n    declarations: [Messages]\n})\nexport class MessagesModule { }\n"]}