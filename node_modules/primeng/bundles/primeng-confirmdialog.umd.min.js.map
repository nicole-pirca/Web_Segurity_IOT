{"version":3,"sources":["ng://primeng/confirmdialog/confirmdialog.ts"],"names":["ConfirmDialog","el","renderer","confirmationService","zone","_this","this","acceptIcon","acceptLabel","acceptVisible","rejectIcon","rejectLabel","rejectVisible","closeOnEscape","blockScroll","closable","autoZIndex","baseZIndex","transitionOptions","focusTrap","subscription","requireConfirmation$","subscribe","confirmation","key","message","icon","header","accept","acceptEvent","EventEmitter","reject","rejectEvent","visible","prototype","onAnimationStart","event","toState","container","element","contentContainer","DomHandler","findSingle","focus","appendContainer","moveOnTop","bindGlobalListeners","enableModality","onOverlayHide","appendTo","document","body","appendChild","restoreAppend","nativeElement","mask","createElement","style","zIndex","String","parseInt","addMultipleClasses","addClass","disableModality","removeChild","removeClass","close","emit","hide","preventDefault","zindex","documentEscapeListener","listen","which","focusableElements","getFocusableElements","length","activeElement","focusedIndex","indexOf","shiftKey","unbindGlobalListeners","ngOnDestroy","unsubscribe","ElementRef","Renderer2","ConfirmationService","NgZone","__decorate","Input","ContentChild","Footer","static","ViewChild","Component","selector","template","animations","trigger","state","transform","opacity","transition","animate","ConfirmDialogModule","NgModule","imports","CommonModule","ButtonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,EventEmitter,Renderer2,ContentChild,NgZone,ViewChild} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {Footer,SharedModule} from 'primeng/api';\nimport {ButtonModule} from 'primeng/button';\nimport {Confirmation} from 'primeng/api';\nimport {ConfirmationService} from 'primeng/api';\nimport {Subscription}   from 'rxjs';\n\n@Component({\n    selector: 'p-confirmDialog',\n    template: `\n        <div [ngClass]=\"{'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl}\" [ngStyle]=\"style\" [class]=\"styleClass\" (mousedown)=\"moveOnTop()\"\n            [@animation]=\"{value: 'visible', params: {transitionParams: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" *ngIf=\"visible\">\n            <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\">\n                <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                    <span class=\"pi pi-fw pi-times\"></span>\n                </a>\n            </div>\n            <div #content class=\"ui-dialog-content ui-widget-content\">\n                <i [ngClass]=\"'ui-confirmdialog-icon'\" [class]=\"icon\" *ngIf=\"icon\"></i>\n                <span class=\"ui-confirmdialog-message\" [innerHTML]=\"message\"></span>\n            </div>\n            <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footer\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n            <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"!footer\">\n                <button type=\"button\" pButton [icon]=\"acceptIcon\" [label]=\"acceptLabel\" (click)=\"accept()\" [class]=\"acceptButtonStyleClass\" *ngIf=\"acceptVisible\"></button>\n                <button type=\"button\" pButton [icon]=\"rejectIcon\" [label]=\"rejectLabel\" (click)=\"reject()\" [class]=\"rejectButtonStyleClass\" *ngIf=\"rejectVisible\"></button>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'translateX(-50%) translateY(-50%) scale(0.7)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateX(-50%) translateY(-50%) scale(1)',\n                opacity: 1\n            })),\n            transition('* => *', animate('{{transitionParams}}'))\n        ])\n    ]\n})\nexport class ConfirmDialog implements OnDestroy {\n    \n    @Input() visible: boolean;\n\n    @Input() header: string;\n    \n    @Input() icon: string;\n    \n    @Input() message: string;\n\n    @Input() style: any;\n    \n    @Input() styleClass: string;\n    \n    @Input() acceptIcon: string = 'pi pi-check';\n    \n    @Input() acceptLabel: string = 'Yes';\n    \n    @Input() acceptVisible: boolean = true;\n\n    @Input() rejectIcon: string = 'pi pi-times';\n    \n    @Input() rejectLabel: string = 'No';\n    \n    @Input() rejectVisible: boolean = true;\n    \n    @Input() acceptButtonStyleClass: string;\n    \n    @Input() rejectButtonStyleClass: string;\n\n    @Input() closeOnEscape: boolean = true;\n\n    @Input() blockScroll: boolean = true;\n\n    @Input() rtl: boolean;\n\n    @Input() closable: boolean = true;\n    \n    @Input() appendTo: any;\n    \n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n    \n    @Input() transitionOptions: string = '150ms cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() focusTrap: boolean = true;\n\n    @ContentChild(Footer, { static: true }) footer;\n\n    @ViewChild('content', { static: true }) contentViewChild: ElementRef;\n    \n    confirmation: Confirmation;\n        \n    _visible: boolean;\n    \n    documentEscapeListener: any;\n        \n    mask: any;\n\n    container: HTMLDivElement;\n        \n    contentContainer: HTMLDivElement;\n      \n    subscription: Subscription;\n\n    preWidth: number;\n                \n    constructor(public el: ElementRef, public renderer: Renderer2, private confirmationService: ConfirmationService, public zone: NgZone) {\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                this.message = this.confirmation.message||this.message;\n                this.icon = this.confirmation.icon||this.icon;\n                this.header = this.confirmation.header||this.header;\n                this.rejectVisible = this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible;\n                this.acceptVisible = this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible;\n                this.acceptLabel = this.confirmation.acceptLabel||this.acceptLabel;\n                this.rejectLabel = this.confirmation.rejectLabel||this.rejectLabel;\n\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n                \n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n\n                if (this.confirmation.blockScroll === false) {\n                    this.blockScroll = this.confirmation.blockScroll;\n                }\n\n                this.visible = true;\n            }\n        });         \n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.contentContainer = DomHandler.findSingle(this.container, '.ui-dialog-content');\n                \n                if (this.acceptVisible || this.rejectVisible) {\n                    DomHandler.findSingle(this.container, 'button').focus();\n                }\n\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                this.enableModality();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n        \n    enableModality() {\n        if (!this.mask) {\n            this.mask = document.createElement('div');\n            this.mask.style.zIndex = String(parseInt(this.container.style.zIndex) - 1);\n            DomHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');\n            document.body.appendChild(this.mask);\n            DomHandler.addClass(document.body, 'ui-overflow-hidden');\n\n            if(this.blockScroll) {\n                DomHandler.addClass(document.body, 'ui-overflow-hidden');\n            }\n        }\n    }\n    \n    disableModality() {\n        if (this.mask) {\n            document.body.removeChild(this.mask);\n            DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n\n            if(this.blockScroll) {            \n                DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n            }\n            \n            this.mask = null;\n        }\n    }\n    \n    close(event: Event) {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        \n        this.hide();\n        event.preventDefault();\n    }\n    \n    hide() {\n        this.visible = false;\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n    \n    bindGlobalListeners() {\n        if ((this.closeOnEscape && this.closable) || this.focusTrap && !this.documentEscapeListener) {\n            this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n                if (event.which == 27 && (this.closeOnEscape && this.closable)) {\n                    if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex) && this.visible)Â {\n                        this.close(event);\n                    }\n                }\n\n                if(event.which === 9 && this.focusTrap) {\n                    event.preventDefault();\n                    \n                    let focusableElements = DomHandler.getFocusableElements(this.container);\n    \n                    if (focusableElements && focusableElements.length > 0) {\n                        if (!document.activeElement) {\n                            focusableElements[0].focus();\n                        }\n                        else {\n                            let focusedIndex = focusableElements.indexOf(document.activeElement);\n    \n                            if (event.shiftKey) {\n                                if (focusedIndex == -1 || focusedIndex === 0)\n                                    focusableElements[focusableElements.length - 1].focus();\n                                else\n                                    focusableElements[focusedIndex - 1].focus();\n                            }\n                            else {\n                                if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                    focusableElements[0].focus();\n                                else\n                                    focusableElements[focusedIndex + 1].focus();\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n    \n    unbindGlobalListeners() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.disableModality();\n        this.unbindGlobalListeners();\n        this.container = null;\n    }\n                \n    ngOnDestroy() {\n        this.restoreAppend();\n        this.onOverlayHide();\n        this.subscription.unsubscribe();\n    }\n    \n    accept() {\n        if (this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n        \n        this.hide();\n        this.confirmation = null;\n    }\n    \n    reject() {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        \n        this.hide();\n        this.confirmation = null;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule],\n    exports: [ConfirmDialog,ButtonModule,SharedModule],\n    declarations: [ConfirmDialog]\n})\nexport class ConfirmDialogModule { }"]}